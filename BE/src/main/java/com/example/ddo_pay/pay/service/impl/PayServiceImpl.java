package com.example.ddo_pay.pay.service.Impl;

import com.example.ddo_pay.client.BankClient;
import com.example.ddo_pay.common.exception.CustomException;
import com.example.ddo_pay.common.response.ResponseCode;
import com.example.ddo_pay.common.util.RedisHandler;
import com.example.ddo_pay.gift.entity.Gift;
import com.example.ddo_pay.gift.repository.GiftRepository;
import com.example.ddo_pay.pay.dto.bank_request.BankDdoPayChargeRequest;
import com.example.ddo_pay.pay.dto.bank_request.PosRequest;
import com.example.ddo_pay.pay.dto.bank_request.TokenEqualResponseDto;
import com.example.ddo_pay.pay.dto.bank_response.BankChargeResponseDto;
import com.example.ddo_pay.pay.dto.finance.DepositAccountWithdrawRequest;
import com.example.ddo_pay.pay.dto.request.*;
import com.example.ddo_pay.pay.dto.response.GetAccountResponse;
import com.example.ddo_pay.pay.dto.response.GetBalanceResponse;
import com.example.ddo_pay.pay.dto.response.GetHistoryListResponse;
import com.example.ddo_pay.pay.dto.response.GetPointResponse;
import com.example.ddo_pay.pay.entity.Account;
import com.example.ddo_pay.pay.entity.AssetType;
import com.example.ddo_pay.pay.entity.DdoPay;
import com.example.ddo_pay.pay.entity.History;
import com.example.ddo_pay.pay.finance_api.FinanceClient;
import com.example.ddo_pay.pay.repository.AccountRepository;
import com.example.ddo_pay.pay.repository.DdoPayRepository;
import com.example.ddo_pay.pay.repository.HistoryRepository;
import com.example.ddo_pay.pay.service.PayService;
import com.example.ddo_pay.sse.SseService;
import com.example.ddo_pay.user.entity.User;
import com.example.ddo_pay.user.service.impl.UserRepository;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import java.io.IOException;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.example.ddo_pay.pay.entity.AssetType.BALANCE;

@Slf4j
@Service
@RequiredArgsConstructor
@Transactional
public class PayServiceImpl implements PayService {

    private final RestTemplate restTemplate;
    private final FinanceClient financeClient;
    private final RedisHandler redisHandler;
    private final ObjectMapper objectMapper;
    private final DdoPayRepository ddoPayRepository;
    private final UserRepository userRepository;
    private final AccountRepository accountRepository;
    private final GiftRepository giftRepository;
    private final BankClient bankClient;
    private final HistoryRepository historyRepository;
    private final RedisTemplate<String, Object> redisTemplate;
    private final SseService sseService;


    // Ïú†Ìö® Í≥ÑÏ¢å Ïù∏Ï¶ù
    @Override
    public String verifyAccount(Long userId, AccountVerifyRequest request) {
        String accountNumber = request.getAccountNo();
        String randomMemo = generateRandomMemo(); // ÎûúÎç§ Îã®Ïñ¥ ÏÉùÏÑ±

        DepositAccountWithdrawRequest dto = DepositAccountWithdrawRequest.of(accountNumber, randomMemo);

        ResponseEntity<?> response = financeClient.sendOneWonTransfer(dto);

        if (response == null) {
            return "ERR_API";
        }

        if (!response.getStatusCode().is2xxSuccessful()) {
            System.out.println("Í∏àÏúµÎßù ÏùëÎãµ Ïã§Ìå®: " + response.getBody());
            return "ERR_API";
        }

        try {

            JsonNode root = objectMapper.readTree((String) response.getBody());
            String responseCode = root.path("Header").path("responseCode").asText();

            System.out.println("Í∏àÏúµÎßù ÏùëÎãµ ÏΩîÎìú: " + responseCode);

            if ("H0000".equals(responseCode)) {
                String key = "userId:" + userId;
                String value = "word:" + randomMemo + ",accountNo:" + accountNumber;

                redisHandler.executeOperation(() ->
                        redisHandler.getValueOperations().set(key, value, Duration.ofMinutes(6))
                );
                System.out.println("Redis Ï†ÄÏû• ÏôÑÎ£å ‚Üí key: " + key + " / value: " + value);

            } else if ("A1003".equals(responseCode)) {
                redisHandler.deleteKey("userId:" + userId);
                System.out.println("Redis ÌÇ§ ÏÇ≠Ï†ú: userId:" + userId + " (Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Í≥ÑÏ¢å)");
            }

            return responseCode;

        } catch (IOException e) {
            return "ERR_PARSING";
        }
    }


    // ÎûúÎç§ ÏòÅÎã®Ïñ¥ api Ìò∏Ï∂ú
    private String generateRandomMemo() {
        String[] response = restTemplate.getForObject("https://random-word-api.herokuapp.com/word", String[].class);
        return (response != null && response.length > 0) ? response[0] : "default";
    }

    // ÎûúÎç§ Îã®Ïñ¥ ÌôïÏù∏ ÌõÑ Í≥ÑÏ¢å Îì±Î°ù
    @Override
    public void registerAccount(Long userId, RegisterAccountRequest request) {
        String inputWord  = request.getRandomWord();
        String redisKey = "userId:" + userId;

        String redisValue = (String) redisHandler.getValueOperations().get(redisKey);
        if (redisValue == null) {
            throw new CustomException(ResponseCode.REDIS_NOT_FOUND);
        }

        System.out.println("ÏûÖÎ†•Î∞õÏùÄ Îã®Ïñ¥ = " + inputWord);

        String[] parts = redisValue.split(",");
        String storedWord = null;
        String storedAccountNo = null;
        for (String part : parts) {
            if (part.startsWith("word:")) {
                storedWord = part.substring("word:".length());
            } else if (part.startsWith("accountNo:")) {
                storedAccountNo = part.substring("accountNo:".length());
            }
        }

        if (storedWord == null || storedAccountNo == null) {
            throw new CustomException(ResponseCode.INVALID_REDIS_FORMAT);
        }

        // Îã®Ïñ¥ ÎπÑÍµê
        if (!storedWord.equalsIgnoreCase(inputWord.trim())) {
            throw new CustomException(ResponseCode.NOT_VERIFIED_ACCOUNT);
        }

        // ÏÇ¨Ïö©Ïûê & ÎòêÌéòÏù¥ Ï°∞Ìöå
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new CustomException(ResponseCode.NO_EXIST_USER));

        DdoPay ddoPay = ddoPayRepository.findByUser(user)
                .orElseThrow(() -> new CustomException(ResponseCode.NO_EXIST_DDOPAY));

        // Í≥ÑÏ¢å Ï†ÄÏû•
        Account account = Account.builder()
                .accountNum(storedAccountNo)
                .ddoPay(ddoPay)
                .build();

        accountRepository.save(account);

        // Redis ÏÇ≠Ï†ú
        redisHandler.deleteKey(redisKey);

    }


    // ÎπÑÎ∞ÄÎ≤àÌò∏ Îì±Î°ù Î∞è ÎòêÌéòÏù¥ ÏÉùÏÑ±
    @Override
    public void registerPayPassword(Long userId, RegisterPasswordRequest request) {
        String password = request.getPassword();


        // ÎπÑÎ∞ÄÎ≤àÌò∏ 6ÏûêÎ¶¨ Ïà´ÏûêÏù∏ÏßÄ Í≤ÄÏ¶ù
        if (!password.matches("^\\d{6}$")) {
            throw new CustomException(ResponseCode.INVALID_PAY_PASSWORD);
        }

        // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new CustomException(ResponseCode.NO_EXIST_USER));

        // Ïù¥ÎØ∏ ÎòêÌéòÏù¥Í∞Ä Îì±Î°ùÎêòÏñ¥ ÏûàÎã§Î©¥ ÏòàÏô∏ Ï≤òÎ¶¨
        if (ddoPayRepository.existsByUser(user)) {
            throw new CustomException(ResponseCode.ALREADY_REGISTERED_DDOPAY);
        }

        // ÎòêÌéòÏù¥ ÏÉùÏÑ±
        DdoPay ddoPay = DdoPay.builder()
                .user(user)
                .balance(0)
                .point(0)
                .payPassword(password)
                .build();

        // ÏñëÎ∞©Ìñ• Ïó∞Í¥Ä Í¥ÄÍ≥Ñ ÏÑ§Ï†ï
        user.changeDdoPay(ddoPay);

        ddoPayRepository.save(ddoPay);
    }

    // ÏûîÍ≥† Ï°∞Ìöå
    @Override
    public GetBalanceResponse selectBalance(Long userId) {
        log.debug("üîç [selectBalance] ÏûîÍ≥† Ï°∞Ìöå ÏöîÏ≤≠ - userId: {}", userId);
        User findUser = userRepository.findById(userId)
                .orElseThrow(() -> new CustomException(ResponseCode.NO_EXIST_USER));
        int balance = findUser.getDdoPay().getBalance();
        return new GetBalanceResponse(balance);
    }

    // Ìè¨Ïù∏Ìä∏ Ï°∞Ìöå
    @Override
    public GetPointResponse selectPoint(Long userId) {
        User findUser = userRepository.findById(userId)
                .orElseThrow(() -> new CustomException(ResponseCode.NO_EXIST_USER));
        int point = findUser.getDdoPay().getPoint();
        return new GetPointResponse(point);
    }

    // Í≥ÑÏ¢å Ï°∞Ìöå
    @Override
    public List<GetAccountResponse> selectAccountList(Long userId) {
        User findUser = userRepository.findById(userId)
                .orElseThrow(() -> new CustomException(ResponseCode.NO_EXIST_USER));

        // ÏÇ¨Ïö©ÏûêÏùò DdoPay ÏóîÌã∞Ìã∞ÏóêÏÑú Í≥ÑÏ¢å Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
        List<Account> accountList = findUser.getDdoPay().getAccountList();

        if (accountList.isEmpty()) {
            throw new CustomException(ResponseCode.NO_EXIST_ACCOUNT);
        }

        // Í∞Å AccountÎ•º GetAccountResponseÎ°ú Î≥ÄÌôòÌïòÏó¨ Î¶¨Ïä§Ìä∏ Î∞òÌôò
        return accountList.stream()
                .map(GetAccountResponse::from)
                .collect(Collectors.toList());
    }


    // Í∏∞ÌîÑÌã∞ÏΩò ÏÉùÏÑ± Ïãú ÎòêÌéòÏù¥ ÏûîÏï° Ï°∞Ìöå ÌõÑ Ï∂úÍ∏à(ÏûîÏï° Î≥ÄÍ≤Ω)
    @Transactional
    @Override
    public void withdrawDdoPay(Long userId, int amount) {
        DdoPay ddoPay = ddoPayRepository.findByUserId(userId).orElseThrow(() -> new CustomException(ResponseCode.NO_EXIST_DDOPAY));

        if (!ddoPay.isAvailableToPay(amount)) {
            throw new CustomException(ResponseCode.INSUFFICIENT_BALANCE);
        }

        ddoPay.decreaseBalance(amount);
        // Í≤∞Ï†ú ÎÇ¥Ïó≠ Ï∂îÍ∞Ä
        History history = History.builder()
                .title("Í∏∞ÌîÑÌã∞ÏΩò ÏÉùÏÑ±")
                .time(LocalDateTime.now())
                .inOutAmount(amount*-1)
                .type(BALANCE)
                .ddoPay(ddoPay)
                .build();
        ddoPay.getHistoryList().add(history);
        ddoPayRepository.save(ddoPay);
        historyRepository.save(history);
    }

    // Í∏∞ÌîÑÌã∞ÏΩò Ï∑®ÏÜå ÌôòÎ∂à Ïãú 90% Í∏àÏï° ÌôòÎ∂à
    @Transactional
    @Override
    public void depositDdoPay(Long userId, int amount) {
        DdoPay ddoPay = ddoPayRepository.findByUserId(userId).orElseThrow(()
                -> new CustomException(ResponseCode.NO_EXIST_DDOPAY));

        ddoPay.increaseBalance(amount);

        // Í≤∞Ï†ú ÎÇ¥Ïó≠ Ï∂îÍ∞Ä
        History history = History.builder()
                .title("Í∏∞ÌîÑÌã∞ÏΩò ÌôòÎ∂à")
                .time(LocalDateTime.now())
                .inOutAmount(amount)
                .type(BALANCE)
                .ddoPay(ddoPay)
                .build();
        ddoPay.getHistoryList().add(history);
        ddoPayRepository.save(ddoPay);
        historyRepository.save(history);
    }

    // ÎòêÌéòÏù¥ Ï∂©Ï†Ñ
    @Transactional
    @Override
    public void transferDdoPay(Long userId, ChargeDdoPayRequest request) {
        DdoPay ddoPay = ddoPayRepository.findByUserId(userId)
                .orElseThrow(() -> new CustomException(ResponseCode.NO_EXIST_DDOPAY));

        // ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÎã§Î©¥,
        if (!ddoPay.checkPassword(request.getPassword())){
            throw new CustomException(ResponseCode.DIFFRENT_PASSWORD);
        }

        // ÏÇ¨Ïö©Ïûê Í≥ÑÏ¢å Í∞ÄÏ†∏Ïò§Í∏∞. ÌïòÎÇòÎßå ÏûàÎã§Í≥† Í∞ÄÏ†ï
        if(ddoPay.getAccountList().isEmpty()) {
            throw new CustomException(ResponseCode.NO_EXIST_ACCOUNT);
        }
        String accountNum = ddoPay.getAccountList().get(0).getAccountNum();

        BankDdoPayChargeRequest bankRequest = BankDdoPayChargeRequest.builder()
                .userAccountNum(accountNum)
                .corporationAccountNum("9990627419918613")
                .amount(request.getAmount())
                .build();

        log.info("Feign ÏöîÏ≤≠ Î∞îÎîî: userAccountNum={}, corpAccountNum={}, amount={}",
                bankRequest.getUserAccountNum(),
                bankRequest.getCorporationAccountNum(),
                bankRequest.getAmount()
        );


        ResponseEntity<BankChargeResponseDto> bankResponse = bankClient.chargeDdoPay(bankRequest);

        BankChargeResponseDto responseBody = bankResponse.getBody();
        log.info("Feign Ï†ÑÏ≤¥ ÏùëÎãµ = {}", bankResponse);
        log.info("Feign ÏùëÎãµ Î∞îÎîî = {}", bankResponse.getBody());

        if (responseBody == null || responseBody.getHeader() == null) {
            throw new CustomException(ResponseCode.INTERNAL_SERVER_ERROR, "bank", "ÏùëÎãµÏù¥ ÎπÑÏñ¥ ÏûàÏùå");
        }

        String responseCode = responseBody.getHeader().getResponseCode();


        // ÏÑ±Í≥µ ÏΩîÎìúÍ∞Ä Ïò§Î©¥ balance Î≥ÄÍ≤Ω, history ÏÉùÏÑ±
        if ("H0000".equals(responseCode)) {
            ddoPay.plueBalance(request.getAmount());
            ddoPayRepository.save(ddoPay);

            // History ÏÉùÏÑ± Î∞è Ïó∞Í≤∞
            History history = new History();
            history.setTitle("ÎòêÌéòÏù¥ Ï∂©Ï†Ñ");
            history.setTime(LocalDateTime.now());
            history.setInOutAmount(request.getAmount());
            history.setType(BALANCE);
            history.setDdoPay(ddoPay);

            ddoPay.getHistoryList().add(history);

        } else if ("A1014".equals(responseCode)) {
            throw new CustomException(ResponseCode.INSUFFICIENT_BALANCE, "ÏûîÏï° Î∂ÄÏ°±", "Ï∂úÍ∏à Í≥ÑÏ¢å ÏûîÏï° Î∂ÄÏ°±");
        } else throw new CustomException(ResponseCode.INTERNAL_SERVER_ERROR, "bank", "ÏùÄÌñâ ÏùëÎãµ Ïã§Ìå® ÏΩîÎìú: " + responseCode);



    }

    // Í∞ôÎã§Î©¥, Îã§Ïùå Î°úÏßÅ Ïã§Ìñâ(Í≥ÑÏ¢å Ïù¥Ï≤¥ ÏöîÏ≤≠(feignclient) -> ÍπäÌã∞ ÏÉÅÌÉú Î≥ÄÍ≤Ω(Service) -> ÏÑ±Í≥µ ÏùëÎãµ(SSE))
    // Îã§Î•¥Î©¥, ÌîÑÎ°†Ìä∏Î°ú Ïã§Ìå® ÏùëÎãµ(SSE) + posÎ°ú Ïã§Ìå® ÏùëÎãµ(REST)
    @Transactional
    @Override
    public void posPayment(TokenEqualResponseDto request) throws JsonProcessingException {
        log.info("TokenEqualResponseDto: {}, Í∏àÏï°: {}, Í∞ÄÎßπÏ†ê Í≥ÑÏ¢å: {}",
                request.getPaymentToken(),
                request.getPaymentAmount(),
                request.getStoreAccount());

        if (!request.getResult()) {
            if (request.getUserId() != null) {
                Map<String, Object> eventData = new HashMap<>();
                eventData.put("status", "FAIL");
                eventData.put("message", "Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Í≤∞Ï†ú ÌÜ†ÌÅ∞ÏûÖÎãàÎã§.");
                String jsonData = new ObjectMapper().writeValueAsString(eventData);
                sseService.sendToUser(request.getUserId(), "token-validation-fail", jsonData);
            }
            throw new CustomException(ResponseCode.INVALID_PAYMENT_TOKEN);
        }

        log.info("ÏùºÏπòÎêú Î°úÏßÅ Ïã§Ìñâ");
        final double FEE_RATE = 0.01;
        final double REWARD_RATE = 0.005;

        int fee = (int) (request.getPaymentAmount() * FEE_RATE);
        int paymentAmount = request.getPaymentAmount() - fee;

        BankDdoPayChargeRequest bankRequest = BankDdoPayChargeRequest.builder()
                .userAccountNum("9990627419918613")
                .corporationAccountNum(request.getStoreAccount())
                .amount(paymentAmount)
                .build();

        log.info("Í≥ÑÏ¢å Ïù¥Ï≤¥Ìï† Í∏àÏï° : {}", paymentAmount);
        ResponseEntity<BankChargeResponseDto> response = bankClient.chargeDdoPay(bankRequest);

        if (!response.getStatusCode().is2xxSuccessful()) {
            handleBankFailure(request.getUserId());
            throw new CustomException(ResponseCode.BANK_TRANSACTION_FAILED);
        }

        BankChargeResponseDto responseBody = response.getBody();
        if (responseBody == null || responseBody.getHeader() == null) {
            throw new CustomException(ResponseCode.INTERNAL_SERVER_ERROR, "bank", "ÏùÄÌñâ ÏùëÎãµ Î∞îÎîî ÏóÜÏùå");
        }

        Gift gift = giftRepository.findById(request.getGiftId())
                .orElseThrow(() -> new CustomException(ResponseCode.NO_EXIST_GIFTICON));
        DdoPay ddoPay = ddoPayRepository.findByUser(gift.getUser())
                .orElseThrow(() -> new CustomException(ResponseCode.NO_EXIST_DDOPAY));
        ddoPay.addPoint((int) (request.getPaymentAmount() * REWARD_RATE));
        ddoPayRepository.save(ddoPay);

        String key = "token:" + request.getPaymentToken();
        String redisValue = (String) redisTemplate.opsForValue().get(key);
        if (redisValue == null) {
            throw new CustomException(ResponseCode.REDIS_NOT_FOUND, "Í≤∞Ï†ú ÌÜ†ÌÅ∞ ÏóÜÏùå", "key: " + key);
        }

        Long giftId = null;
        Long userId = null;
        for (String part : redisValue.split(",")) {
            String[] split = part.split(":");
            if (split.length != 2) continue;
            if (part.startsWith("giftId:")) giftId = Long.valueOf(split[1]);
            else if (part.startsWith("userId:")) userId = Long.valueOf(split[1]);
        }

        log.info("userId = {}, giftId={}", userId, giftId);
        gift.changeUsedAfter();
        giftRepository.save(gift);
        log.info("Í∏∞ÌîÑÌã∞ÏΩò ÏÉÅÌÉú Î≥ÄÍ≤Ω Î∞è Ï†ÄÏû• ÏôÑÎ£å");

        if (userId != null) {
            Map<String, Object> eventData = new HashMap<>();
            eventData.put("status", "SUCCESS");
            eventData.put("message", "Í≤∞Ï†úÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï≤òÎ¶¨ÎêòÏóàÏäµÎãàÎã§.");
            eventData.put("giftId", giftId);
            eventData.put("amount", paymentAmount);
            String jsonData = new ObjectMapper().writeValueAsString(eventData);
            sseService.sendToUser(userId, "payment-success", jsonData);
            log.info("SSE ÏùëÎãµ Ï†ÑÏÜ° ÏôÑÎ£å");
        }

        redisTemplate.delete(key);
    }

    private void handleBankFailure(Long userId) throws JsonProcessingException {
        if (userId != null) {
            Map<String, Object> eventData = new HashMap<>();
            eventData.put("status", "FAIL");
            eventData.put("message", "Í≤∞Ï†ú Ï≤òÎ¶¨ Ï§ë ÏùÄÌñâ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
            String jsonData = new ObjectMapper().writeValueAsString(eventData);
            sseService.sendToUser(userId, "payment-fail", jsonData);
            log.info("SSE Ïã§Ìå® ÏùëÎãµ Ï†ÑÏÜ°");
        }
    }


    // Í∏∞ÌîÑÌã∞ÏΩò Í≤∞Ï†ú Ïãú ÎπÑÎ∞ÄÎ≤àÌò∏ Ï°∞Ìöå
    @Override
    public Boolean verifyGiftPassword(Long userId, String inputPassword) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new CustomException(ResponseCode.NO_EXIST_USER));

        DdoPay ddoPay = user.getDdoPay();
        if (ddoPay == null) {
            throw new CustomException(ResponseCode.NO_EXIST_DDOPAY);
        }
        return ddoPay.checkPassword(inputPassword);
    }

    // Í≤∞Ï†ú ÎÇ¥Ïó≠ Ï°∞Ìöå
    @Override
    public List<GetHistoryListResponse> selectHistoryList(Long userId, SelectHistoryRequest request) {
        AssetType assetType;
        try {
            assetType = AssetType.valueOf(request.getHistoryType().toUpperCase());
        } catch (IllegalArgumentException e) {
            throw new RuntimeException("Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Í≤∞Ï†ú ÎÇ¥Ïó≠ ÌÉÄÏûÖ: " + request.getHistoryType());
        }
        User findUser = userRepository.findById(userId).orElseThrow(() -> new CustomException(ResponseCode.NO_EXIST_USER));
        Long payId = findUser.getDdoPay().getId();
        List<History> histories = historyRepository.findByDdoPay_IdAndType(payId, assetType);
        List<GetHistoryListResponse> responseList = histories.stream().map(history -> {
            GetHistoryListResponse response = new GetHistoryListResponse();
            response.setId(history.getId());
            response.setTitle(history.getTitle());
            response.setTime(history.getTime());
            response.setInOutAmount(history.getInOutAmount());
            response.setType(history.getType());
            return response;
        }).collect(Collectors.toList());

        return responseList;
    }

    // Í∞ôÏùÄÏßÄ Îã§Î•∏ÏßÄÎßå ÌôïÏù∏ÌïòÍ≥† dtoÏóê Í≤∞Í≥ºÍ∞í Î∞òÏòÅÌï¥ÏÑú ÏùëÎãµÌïòÍ∏∞
    @Override
    public TokenEqualResponseDto comparePaymentToken(PosRequest request) {
        String paymentToken = request.getPaymentToken();
        String key = "token:" + paymentToken;
        String redisValue = (String) redisTemplate.opsForValue().get(key);

        // ‚úÖ null Ï≤¥ÌÅ¨ Ï∂îÍ∞Ä
        if (redisValue == null) {
            throw new CustomException(ResponseCode.REDIS_NOT_FOUND, "Í≤∞Ï†ú ÌÜ†ÌÅ∞ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå", "key: " + key);
        }

        log.info("Î†àÎîîÏä§Ïóê Í≤∞Ï†ú Îç∞Ïù¥ÌÑ∞ ÏûàÎäîÏßÄ ÌôïÏù∏ : {}", redisValue);
        // RedisÏóêÏÑú ÌïÑÏöîÌïú Ï†ïÎ≥¥ Ï∂îÏ∂ú
        Long giftId = null;
        Long userId = null;
        Integer expectedAmount = null;

        String[] parts = redisValue.split(",");
        for (String part : parts) {
            if (part.startsWith("giftId:")) {
                giftId = Long.valueOf(part.split(":")[1]);
            }
            if (part.startsWith("userId:")) {
                userId = Long.valueOf(part.split(":")[1]);
            }
            if (part.startsWith("amount:")) {
                expectedAmount = Integer.parseInt(part.split(":")[1]);
            }
        }
        log.info("posÏóêÏÑú Í≤∞Ï†úÌïú Í∏àÏï° : {}", request.getPaymentAmount());
        log.info("Î†àÎîîÏä§Ïùò Í∏∞ÌîÑÌã∞ÏΩò Í∏àÏï° : {}", expectedAmount);

        // Í∏àÏï° Í≤ÄÏ¶ù. Ïù¥Í±∞ Í∏àÏï° Îã¨ÎùºÎèÑ Î≥¥ÎÇ¥ÏßÄÍ≤å Î≥ÄÍ≤Ω
       // boolean amountMatches = (expectedAmount != null && expectedAmount.equals(request.getPaymentAmount()));
       // log.info("ÌÜ†ÌÅ∞ Í∏àÏï°Í≥º Í≤∞Ï†ú Í∏àÏï°Ïù¥ ÎèôÏùºÌïúÏßÄ ÌôïÏù∏ : {}", amountMatches);

        return TokenEqualResponseDto.builder()
                .result(true)
                .paymentToken(paymentToken)
                .paymentAmount(expectedAmount)
                .storeAccount(request.getStoreAccount())
                .userId(userId)
                .giftId(giftId)
                .build();
    }


}
